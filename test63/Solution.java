package test63;

/**
 * 不用加减乘除做加法
 * 写一个函数，求两个整数之和，要求不得使用 +、-、*、/ 四则运算符号。
 * a ^ b 表示没有考虑进位的情况下两数的和，(a & b) << 1 就是进位。
 * 异或是一种基于二进制的位运算，用符号XOR或者 ^ 表示，其运算法则是对运算符两侧数的每一个二进制位，同值取0，异值取1。简单理解就是不进位加法，如1+1=0，,0+0=0,1+0=1。
 * 递归会终止的原因是 (a & b) << 1 最右边会多一个 0，那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，递归终止。
 * @author 54060
 *
 */
public class Solution {
	public int Add(int a, int b) {
	    return b == 0 ? a : Add(a ^ b, (a & b) << 1);  //与操作之后为1的位，说明a和b的该位都是1，需要进位，即前一位变成1.
	}
}
